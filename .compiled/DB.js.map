{"version":3,"sources":["../src/DB.js"],"names":["MongoClient","require","db_url","db_name","DB","user","jsonU","toJSON","client","connect","db","collection","update","id","close","insertOne","GetUsersCollection","res","findOne","vk_uname","taskname","tasktype","GetTasksCollection","type","find","author_id","workers","$not","$elemMatch","user_id","$ne","status","task","jsonT"],"mappings":"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","file":"DB.js","sourcesContent":["const MongoClient = require('mongodb').MongoClient;\r\nconst db_url = 'mongodb://evkator:isl0952214823bag@ds249355.mlab.com:49355/vklikebot';//'mongodb://localhost:27017/vklikebot';\r\nconst db_name = 'vklikebot';\r\n\r\nexport default class DB\r\n{\r\n    static async UpdateUser(user){\r\n        let jsonU = user.toJSON();\r\n        let client = await MongoClient.connect(db_url);\r\n        const db = client.db(db_name);\r\n        await db.collection('users').update({id : user.id}, jsonU);\r\n        await client.close();\r\n    }\r\n\r\n    static async GetUsersCollection(){\r\n        let client = await MongoClient.connect(db_url);\r\n        const db = client.db(db_name);\r\n        return db.collection('users');\r\n    }\r\n\r\n    static async InsertUser(user){\r\n        const jsonU = user.toJSON();\r\n        let client = await MongoClient.connect(db_url);\r\n        const db = client.db(db_name);\r\n        await db.collection('users').insertOne(jsonU);\r\n        await client.close();\r\n    }\r\n\r\n    static async GetUser(id){\r\n        const collection = await DB.GetUsersCollection();\r\n        return res = await collection.findOne({id: id}, { });\r\n    }\r\n\r\n    static async FindUserByVk(vk_uname){\r\n        const collection = await DB.GetUsersCollection();\r\n        return await collection.findOne({'vk_acc.uname':vk_uname});\r\n    }\r\n\r\n    ////////////TASK///////////////////\r\n\r\n    static async GetTasksCollection(){\r\n        const client = await MongoClient.connect(db_url);\r\n        const db = client.db(db_name);\r\n        const collection = db.collection('tasks');\r\n        return collection;\r\n    }\r\n    \r\n    static async GetTask(taskname, tasktype){\r\n        const collection = await DB.GetTasksCollection();\r\n        if(tasktype)\r\n            return await collection.findOne({taskname: taskname}, {type: tasktype});\r\n        else\r\n            return  await collection.findOne({taskname: taskname}, { });\r\n    }\r\n\r\n    static async GetTasksOfUser(user){\r\n        const collection = await DB.GetTasksCollection();\r\n        return await collection.find({author_id:user.id});\r\n    }\r\n\r\n    static async GetTaskForUser(user, type){\r\n        const collection = await DB.GetTasksCollection();\r\n        let res = await collection.find({workers: {$not: {$elemMatch : {user_id:user.id}}}, \r\n            author_id:{$ne: user.id}, type: type, status : {$ne : 'done'}});\r\n        \r\n    }\r\n\r\n    static async InsertTask(task){\r\n        let jsonT = task.toJSON();\r\n        let client = await MongoClient.connect(db_url);\r\n        const db = client.db(db_name);\r\n        await db.collection('tasks').insertOne(jsonT);\r\n        client.close();\r\n    }\r\n\r\n    static async UpdateTask(task){\r\n        const jsonT = task.toJSON();\r\n        const client = await MongoClient.connect(db_url);\r\n        const db = client.db(db_name);\r\n        await db.collection('tasks').update({taskname : this.taskname}, this.toJSON());\r\n        client.close();\r\n    }\r\n}\r\n\r\n"]}