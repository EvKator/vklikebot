{"version":3,"sources":["../src/task.js"],"names":["MongoClient","require","db_url","db_name","decode","request","cheerio","Task","url","type","required","author_id","taskname","remain","cost","_taskname","_type","_url","_required","_remain","_cost","_author_id","_status","client","jsonT","toJSON","connect","db","collection","insertOne","err","console","log","stack","close","user","s","check","Number","pay","update","Pay","task","res","find","i","tasks","length","$ne","status","fromJSON","next","findOne"],"mappings":"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","file":"task.js","sourcesContent":["import VkPhotoLikeTask from \"./VkPhotoLikeTask\";\r\n\r\nconst MongoClient = require('mongodb').MongoClient;\r\n\r\nconst db_url = 'mongodb://localhost:27017/vklikebot';\r\nconst db_name = 'vklikebot';\r\nconst  decode = require('urldecode');\r\nconst  request = require('request');\r\nconst  cheerio = require('cheerio');\r\n\r\nexport default class Task{\r\n\r\n    static Create(url, type, required, author_id){\r\n        switch (type)\r\n        {\r\n            case 'vk_photo_like':\r\n                return new VkPhotoLikeTask(url, type, required, author_id);\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    constructor(taskname, type, url, required, remain, cost, author_id){\r\n        this._taskname = taskname;\r\n        this._type = type;\r\n        this._url = url;\r\n        this._required = required;\r\n        this._remain = remain;\r\n        this._cost = cost;\r\n        this._author_id = author_id;\r\n        this._status = 'created';\r\n    }\r\n\r\n    static async GetTaskForUser(user, type){\r\n        let client;\r\n        let task;\r\n        try {\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('tasks');\r\n            let res = await collection.find();\r\n            for(let i=0;i<user.tasks.length; i++){\r\n                res = await res.collection.find({taskname: {$ne : user.tasks[i].taskname}, type: type, status : {$ne : 'done'}});\r\n            }\r\n            task = Task.fromJSON(await res.next());\r\n            return task;\r\n        }\r\n        catch (err){\r\n            console.log('err');\r\n            console.log(err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static async fromDB(taskname){\r\n        let client;\r\n        let task;\r\n        try {\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('tasks');\r\n            let res = await collection.findOne({taskname: taskname}, { });\r\n            if(typeof res === 'undefined')\r\n                throw 'db is empty';\r\n\r\n            task = Task.fromJSON(res);\r\n            return task;\r\n        }\r\n        catch (err){\r\n            console.log('err');\r\n            console.log(err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static fromJSON(jsonT){\r\n        return new Task( jsonT.taskname, jsonT.type, jsonT.url, jsonT.required, jsonT.remain, jsonT.cost, jsonT.author_id);\r\n    }\r\n\r\n    async saveToDB(){\r\n        let client;\r\n        try {\r\n            let jsonT = this.toJSON();\r\n\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            await db.collection('tasks').insertOne(jsonT);\r\n        } catch (err) {\r\n            console.log('err');\r\n            console.log(err.stack);\r\n        }\r\n\r\n        if (client) {\r\n            client.close();\r\n        }\r\n    }\r\n\r\n    static async check(user, url){\r\n\r\n        console.log('1111111111111');\r\n        return false;\r\n    }\r\n\r\n    async confirm(user){\r\n        console.log('sssssss');\r\n        let s = await VkPhotoLikeTask.check(user, this.url);\r\n        if(s){\r\n            console.log(this._remain);\r\n            this._remain = Number(this._remain) - 1;\r\n            if(this._remain <= this._required)\r\n                this._status = 'done';\r\n            this.pay(user);\r\n            await this.update();\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    pay(user){\r\n        user.Pay(this._cost);\r\n    }\r\n\r\n    toJSON(){\r\n        let jsonT = {\r\n            taskname: this._taskname,\r\n            type: this._type,\r\n            url: this._url,\r\n            required: this._required,\r\n            remain: this._remain,\r\n            cost: this._cost,\r\n            author_id: this._author_id\r\n        };\r\n        return jsonT;\r\n    }\r\n\r\n    async update(){\r\n        let client;\r\n        try {\r\n            let jsonT = this.toJSON();\r\n            client = await MongoClient.connect(db_url);\r\n\r\n            const db = client.db(db_name);\r\n            db.collection('tasks').update({taskname : this.taskname}, this.toJSON());\r\n        } catch (err) {\r\n            //console.log('err');\r\n            //console.log(err.stack);\r\n        }\r\n\r\n        if (client) {\r\n            client.close();\r\n        }\r\n    }\r\n\r\n    get taskname(){\r\n        return this._taskname;\r\n    }\r\n\r\n    get cost(){\r\n        return this._cost;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get url(){\r\n        return this._url;\r\n    }\r\n}"]}