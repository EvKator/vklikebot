{"version":3,"sources":["../src/task.js"],"names":["MongoClient","require","db_url","db_name","decode","request","cheerio","Task","url","type","required","author_id","nTask","TaskExist","taskname","remain","cost","status","workers","_taskname","_type","_url","_required","_remain","_cost","_author_id","_status","_workers","Array","client","jsonT","toJSON","connect","db","collection","insertOne","err","console","log","stack","close","user","s","check","Number","pay","push","user_id","id","update","Pay","task","vk_acc","uname","res","find","$not","$elemMatch","$ne","fromJSON","next","findOne","tasktype","tasks","hasNext"],"mappings":"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","file":"task.js","sourcesContent":["import VkPhotoLikeTask from \"./VkPhotoLikeTask\";\r\n\r\nconst MongoClient = require('mongodb').MongoClient;\r\n\r\nconst db_url = 'mongodb://evkator:isl0952214823bag@ds249355.mlab.com:49355/vklikebot';\r\nconst db_name = 'vklikebot';\r\nconst  decode = require('urldecode');\r\nconst  request = require('request');\r\nconst  cheerio = require('cheerio');\r\n\r\nexport default class Task{\r\n\r\n    static async Create(url, type, required, author_id){\r\n        \r\n        let nTask;\r\n        switch (type)\r\n        {\r\n            case 'vk_photo_like_task':\r\n                nTask = new VkPhotoLikeTask(url,  required, author_id);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if(await Task.TaskExist(nTask.taskname, type))\r\n            throw('Хмм..Кажется, задание уже существует. Я ошибаюсь? Напиши в техподдержку, мы поможем');\r\n\r\n        return nTask;\r\n    }\r\n\r\n    constructor(taskname, type, url, required, remain, cost, author_id, status, workers){\r\n\r\n        this._taskname = taskname;\r\n        this._type = type;\r\n        this._url = url;\r\n        this._required = required;\r\n        this._remain = remain;\r\n        this._cost = cost;\r\n        this._author_id = author_id;\r\n        if(!status){\r\n            this._status = 'created';\r\n            this._workers = new Array();\r\n        }\r\n        else{\r\n            this._status = status;\r\n            this._workers = workers;\r\n        }\r\n    }\r\n\r\n    static async GetTaskForUser(user, type){\r\n        let client;\r\n        let task;\r\n\r\n        if(type == 'vk_photo_like_task')\r\n            if(!user.vk_acc.uname)\r\n                throw('Привяжи ВК аккаунт, чтобы выполнять такие задания');\r\n\r\n        try {\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('tasks');\r\n            let res = await collection.find({workers: {$not: {$elemMatch : {user_id:user.id}}}, author_id:{$ne: user.id}, type: type, status : {$ne : 'done'}});\r\n            task = Task.fromJSON(await res.next());\r\n            return task;\r\n        }\r\n        catch (err){\r\n            console.log('err');\r\n            console.log(err.stack);\r\n            throw('Извини, таких заданий сейчас нет');\r\n        }\r\n    }\r\n\r\n    static async fromDB(taskname){\r\n        let client;\r\n        let task;\r\n        try {\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('tasks');\r\n            let res = await collection.findOne({taskname: taskname}, { });\r\n            if(typeof res === 'undefined')\r\n                throw 'db is empty';\r\n\r\n            task = Task.fromJSON(res);\r\n            return task;\r\n        }\r\n        catch (err){\r\n            console.log('err');\r\n            console.log(err.stack);\r\n            throw('Неведомая ошибка на сервере. Пожалуйста, расскажите об этом техподдержке (последний пункт в главном меню)');\r\n        }\r\n    }\r\n\r\n    static async TaskExist(taskname, tasktype){\r\n        let client;\r\n        let task;\r\n        try {\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('tasks');\r\n            let res = await collection.findOne({taskname: taskname}, {task: tasktype});\r\n            if(typeof res === 'undefined')\r\n                throw 'db is empty';\r\n            task = Task.fromJSON(res);\r\n            return true;\r\n        }\r\n        catch (err){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static async GetTasksOfUser(user){\r\n        let client;\r\n        let tasks = new Array();\r\n        try {\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('tasks');\r\n            let type = 'vk_photo_like_task';\r\n            let res = await collection.find({author_id:user.id});\r\n            // let task = Task.fromJSON(await res.next());\r\n            // if(typeof res === 'undefined')\r\n            //     throw 'db is empty';\r\n            //let task = Task.fromJSON(res.next());\r\n            \r\n            while(await res.hasNext()){\r\n                let task = Task.fromJSON(await res.next());\r\n                tasks.push(task);\r\n            }\r\n            // while(res.hasNext()){\r\n            //     res = await res.next();\r\n            //     let task = Task.fromJSON(res);\r\n            //     tasks.push(task);\r\n            // }\r\n        }\r\n        catch (err){\r\n            console.log('err');\r\n            console.log(err.stack);\r\n            throw('Неведомая ошибка на сервере. Пожалуйста, расскажите об этом техподдержке (последний пункт в главном меню)');\r\n        }\r\n        return tasks;\r\n    }\r\n\r\n    static fromJSON(jsonT){\r\n        return new Task( jsonT.taskname, jsonT.type, jsonT.url, jsonT.required, jsonT.remain, jsonT.cost, jsonT.author_id, jsonT.status, jsonT.workers);\r\n    }\r\n\r\n    async saveToDB(){\r\n        let client;\r\n        try {\r\n            let jsonT = this.toJSON();\r\n\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            await db.collection('tasks').insertOne(jsonT);\r\n        } catch (err) {\r\n            console.log('err');\r\n            console.log(err.stack);\r\n        }\r\n\r\n        if (client) {\r\n            client.close();\r\n        }\r\n    }\r\n\r\n    static async check(user, url){\r\n\r\n        console.log('1111111111111');\r\n        return false;\r\n    }\r\n\r\n    async confirm(user){\r\n        let s = await VkPhotoLikeTask.check(user, this.url);\r\n        if(s){\r\n            this._remain = Number(this._remain) - 1;\r\n\r\n            if(this._remain <= 0)\r\n                this._status = 'done';\r\n\r\n            this.pay(user);\r\n            this._workers.push({\r\n                user_id: user.id,\r\n                status: 'checked_once'\r\n            });\r\n            await this.update();\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get workers(){\r\n        return this._workers;\r\n    }\r\n\r\n\r\n\r\n    pay(user){\r\n        user.Pay(this._cost);\r\n    }\r\n\r\n    toJSON(){\r\n        let jsonT = {\r\n            taskname: this._taskname,\r\n            type: this._type,\r\n            url: this._url,\r\n            required: this._required,\r\n            remain: this._remain,\r\n            cost: this._cost,\r\n            author_id: this._author_id,\r\n            status: this._status,\r\n            workers: this._workers\r\n        };\r\n        return jsonT;\r\n    }\r\n\r\n    async update(){\r\n        let client;\r\n        try {\r\n            let jsonT = this.toJSON();\r\n            client = await MongoClient.connect(db_url);\r\n\r\n            const db = client.db(db_name);\r\n            db.collection('tasks').update({taskname : this.taskname}, this.toJSON());\r\n        } catch (err) {\r\n            //console.log('err');\r\n            //console.log(err.stack);\r\n        }\r\n\r\n        if (client) {\r\n            client.close();\r\n        }\r\n    }\r\n\r\n    get taskname(){\r\n        return this._taskname;\r\n    }\r\n\r\n    get required(){\r\n        return this._required;\r\n    }\r\n\r\n    get remain(){\r\n        return this._remain;\r\n    }\r\n\r\n    get cost(){\r\n        return this._cost;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get url(){\r\n        return this._url;\r\n    }\r\n\r\n    get status(){\r\n        return this._status;\r\n    }\r\n\r\n    static toString(){\r\n        return \"Неопределенное задание\";\r\n    }\r\n}"]}