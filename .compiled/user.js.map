{"version":3,"sources":["../src/user.js"],"names":["cheerio","require","request","MongoClient","assert","db_url","db_name","User","id","username","first_name","last_name","status","balance","key","vk_acc","vk_tasks","menu_id","uname","_existInDB","_id","_username","_first_name","_last_name","_status","_balance","_key","_vk_acc","_tasks","_menu_id","taskname","task","fromDB","confirm","err","push","sendMessage","url","required","console","log","saveToDB","cost","client","jsonU","toJSON","connect","db","collection","update","close","vk_link","vk_uname","exec","toString","html","$","load","text","userStatus","vkacc","user","coins","insertOne","lastname","tasks","msg","telegUser","from","res","findOne","fromJSON","uJSON"],"mappings":"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","file":"user.js","sourcesContent":["import VkPhotoLikeTask from \"./VkPhotoLikeTask\";\r\n\r\nconst  cheerio = require('cheerio');\r\nconst  request = require('request-promise');\r\nconst MongoClient = require('mongodb').MongoClient;\r\nimport bot from './TeleBot';\r\nconst assert = require('assert');\r\nconst db_url = 'mongodb://localhost:27017/vklikebot';\r\nconst db_name = 'vklikebot';\r\nimport Task from './task.js';\r\n//var nmenu = require('./nmenu');\r\n\r\nimport VkAcc from './VkAcc';\r\nexport default class User{\r\n\r\n    constructor(id, username, first_name, last_name, status, balance, key, vk_acc, vk_tasks, menu_id){\r\n        if(!status){\r\n\r\n            status = 'new_user';\r\n            balance = 0;\r\n            key = '';\r\n            vk_acc = {uname:'',id:''};\r\n            vk_tasks = [];\r\n            menu_id = '';\r\n            this._existInDB = false;\r\n        }\r\n        else\r\n            this._existInDB = true;\r\n        this._id = id;\r\n        this._username = username;\r\n        this._first_name = first_name;\r\n        this._last_name = last_name;\r\n        this._status = status;\r\n        this._balance = balance;\r\n        this._key = key;\r\n        this._vk_acc = vk_acc;\r\n        this._tasks = vk_tasks;\r\n        this._menu_id = menu_id;\r\n    }\r\n\r\n    async confirmTask(taskname){\r\n        try {\r\n            let task = await Task.fromDB(taskname);\r\n            if (task) {\r\n                await task.confirm(this);\r\n                return task;\r\n            }\r\n        }\r\n        catch(err) {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async skipTask(taskname){\r\n        let task = await Task.fromDB(taskname);\r\n        this._tasks.push({taskname: taskname, status: 'skip'});\r\n        this.sendMessage(\"skipping success\");\r\n    }\r\n\r\n    async createVkPhotoLikeTask(url, required){\r\n        let task = new VkPhotoLikeTask(url, required, this.id);\r\n        console.log(task);\r\n        if(task){\r\n            try {\r\n                await task.saveToDB();\r\n                this._balance -= task.cost * required;\r\n            }\r\n            catch (err){\r\n                throw err;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async update(){\r\n        let client;\r\n        try {\r\n            let jsonU = this.toJSON();\r\n            client = await MongoClient.connect(db_url);\r\n\r\n            const db = client.db(db_name);\r\n            db.collection('users').update({id : this.id}, this.toJSON());\r\n        } catch (err) {\r\n            //console.log('err');\r\n            //console.log(err.stack);\r\n        }\r\n\r\n        if (client) {\r\n            client.close();\r\n        }\r\n    }\r\n\r\n    async addVkAcc(vk_link) {\r\n        try {\r\n            let vk_uname = (/vk\\.com\\/([a-zA-Z0-9]*)/g).exec(vk_link)[1].toString();\r\n            let html = await request(vk_link);\r\n            let $ = cheerio.load(html);\r\n\r\n\r\n            let text = \"Success\";\r\n            let userStatus = $('div.pp_status').html();\r\n            if (this.key === userStatus) {\r\n                let vkacc = new VkAcc(vk_uname);\r\n                this._vk_acc = vkacc.toJSON();\r\n            }\r\n            else {\r\n                text = \"Failure, status on thee page is \" + userStatus;\r\n            }\r\n            bot.sendMessage(user.id, text);\r\n        }\r\n    catch(err){\r\n            throw err;\r\n        }\r\n\r\n    }\r\n\r\n    sendMessage(text){\r\n        bot.sendMessage(this.id, text);\r\n    }\r\n\r\n    async Pay(coins){\r\n        if(coins>0){\r\n            this._balance += coins;\r\n            await this.update();\r\n        }\r\n        else {\r\n            console.log('Error: coins < 0');\r\n        }\r\n    }\r\n\r\n    static async getSender(msg){\r\n        let telegUser = msg.from;\r\n        let user;\r\n        try{\r\n            user = await User.fromDB(telegUser.id);\r\n        }\r\n        catch(err) {\r\n            user = new User( telegUser.id, telegUser.username, telegUser.first_name, telegUser.last_name);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async saveToDB(){\r\n        let client;\r\n        try {\r\n            let jsonU = this.toJSON();\r\n            jsonU.status = 'created';\r\n\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            await db.collection('users').insertOne(jsonU);\r\n        } catch (err) {\r\n            //console.log('err');\r\n            //console.log(err.stack);\r\n            throw err;\r\n        }\r\n\r\n        if (client) {\r\n            client.close();\r\n        }\r\n    }\r\n\r\n    static async fromDB(id){\r\n        let client;\r\n        let user;\r\n        try {\r\n\r\n            client = await MongoClient.connect(db_url);\r\n            const db = client.db(db_name);\r\n            const collection = db.collection('users');\r\n            let res = await collection.findOne({id: id}, { });\r\n            user = User.fromJSON(res);\r\n        }\r\n        catch (err){\r\n            //console.log('err');\r\n            //console.log(err);\r\n            throw err;\r\n        }\r\n        return user;\r\n    }\r\n\r\n    static fromJSON(uJSON){\r\n        return new User( uJSON.id, uJSON.username, uJSON.first_name, uJSON.last_name, uJSON.status, uJSON.balance, uJSON.key, uJSON.vk_acc, uJSON.tasks, uJSON.menu_id);\r\n    }\r\n\r\n    toJSON(){\r\n        let jsonU = {\r\n            id : this.id,\r\n            username : this.username,\r\n            first_name : this.first_name,\r\n            last_name : this.lastname,\r\n            status : this.status,\r\n            balance : this.balance,\r\n            key : this.key,\r\n            vk_acc : {\r\n                uname : this.vk_acc.uname,\r\n                id: this.vk_acc.id\r\n            },\r\n            tasks : this.tasks,\r\n            menu_id : this.menu_id\r\n        };\r\n        return jsonU;\r\n    }\r\n\r\n\r\n    /////////////////////////////////getters,setters\r\n    set menu_id(menu_id){\r\n        this._menu_id = menu_id;\r\n        this.update();\r\n    }\r\n    get menu_id(){\r\n        return this._menu_id;\r\n    }\r\n    set status(status){\r\n        this._status = status;\r\n        this.update();\r\n    }\r\n    get status(){\r\n        return this._status;\r\n    }\r\n    get ExistInDB(){\r\n        return this._existInDB;\r\n    }\r\n    get id(){\r\n        return this._id;\r\n    }\r\n    get username(){\r\n        return this._username;\r\n    }\r\n    get first_name(){\r\n        return this._first_name;\r\n    }\r\n    get last_name(){\r\n        return this._last_name;\r\n    }\r\n    get status(){\r\n        return this._status;\r\n    }\r\n    get balance(){\r\n        return this._balance;\r\n    }\r\n    set key(key){\r\n        this._key = key;\r\n        this.update();\r\n    }\r\n    get key(){\r\n        return this._key;\r\n    }\r\n    get vk_acc(){\r\n        return this._vk_acc;\r\n    }\r\n    get tasks(){\r\n        return this._tasks;\r\n    }\r\n}\r\n"]}